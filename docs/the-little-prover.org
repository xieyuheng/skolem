#+title: the little prover

* [note]

*** prover for dynamic language

    - x -
      I wonder how can a prover prove things without types ?

    - k -
      it seems acl2 handling the problem of trunk
      in our imp of cicada
      and it also provides a mark language

    - x -
      take (equal (car (cons x y)) x) as an example
      it asserts an equality relation in some function space

    - k -
      we can try to use acl2 to prove nat-add-commutative

*** the mark language for the path to focus

    - x -
      can we use diff instead of mark language ?
      just like what we do in math equation derivation ?
      this diff will also work for postfix language.

    - k -
      but a postfix language can not use mark language like ACL2

    - x -
      nevermind

* (Foreword ix)

* (Preface xi)

* (1. Old Games, New Rules)

*** The Axioms of Cons (initial)

    #+begin_src scheme
    (dethm atom/cons (x y)
      (equal (atom (cons x y)) 'nil))

    (dethm car/cons (x y)
      (equal (car (cons x y)) x))

    (dethm cdr/cons (x y)
      (equal (cdr (cons x y)) y))
    #+end_src

*** The Axioms of Equal (initial)

    #+begin_src scheme
    (dethm equal-same (x)
      (equal (equal x x) 't))

    (dethm equal-swap (x y)
      (equal (equal x y) (equal y x)))
    #+end_src

*** The Law of Dethm (initial)

    - For any theorem (dethm name (x1 . . . xn ) body-x),
      the variables x1 ... xn in body-x can be replaced
      with any corresponding expressions e1 ... en.
      The result, body-e,
      can be used to rewrite a focus p to become q
      provided body-e is either (equal p q) or (equal q p).

*** J-Bob as an assistant

    - following the law of dethm gets more and more challenging,
      we have an assistant named J-Bob
      that helps us rewrite one expression to another.
      J-Bob "knows" about all the axioms and the Law of Dethm
      and makes sure we get all the details right.

* (2. Even Older Games)

*** The Axioms of If (initial)

    #+begin_src scheme
    (dethm if-true (x y)
      (equal (if 't x y) x))

    (dethm if-false (x y)
      (equal (if 't x y) y))

    (dethm if-same (x y)
      (equal (if x y y) y))
    #+end_src

*** (if Q A E)

    - Every if expression has three parts:
      We call them
      - the if question,
      - the if answer,
      - and the if else,
      or Q, A, and E for short.

*** The Axioms of Equal (final)

    #+begin_src scheme
    (dethm equal-same (x)
      (equal (equal x x) 't))

    (dethm equal-swap (x y)
      (equal (equal x y) (equal y x)))

    (dethm equal-if (x y)
      (if (equal x y) (equal x y) 't))
    #+end_src

*** The Law of Dethm (final)

    - For any theorem (dethm name (x1 . . . xn ) body-x),
      the variables x1 ... xn in body-x can be replaced
      with any corresponding expressions e1 ... en.
      The result, body-e, can be used to rewrite a focus
      as follows :

      1. body-e must contain the conclusion
         (equal p q) or (equal q p)

      2. the conclusion must not be found in the question of any
         if or in the argument of any function application,

         - x -
           thus the outter most (equal) can be used

           while the the occurrences of (equal)
           in the question any if
           and in the argument of any function application
           can not be used

           - how about (equal) occurs at
             the function position of a sexp ?

      3. and if the conclusion can be found in an if answer
         (respectively else), then the focus must be found in an
         if answer (respectively else) with the same question.

         - x -
           (equal) in one branch can be used to do rewriting
           and the other branch is ignored.

    - thus,
      the question of (if) serves as a premise
      that allows us to rewrite the focus.

    - x -
      how to make sense of the rules about (if) ?
      how to use it in postfix language ?

*** The Axioms of Cons (final)

    #+begin_src scheme
    (dethm atom/cons (x y)
      (equal (atom (cons x y)) 'nil))

    (dethm car/cons (x y)
      (equal (car (cons x y)) x))

    (dethm cdr/cons (x y)
      (equal (cdr (cons x y)) y))

    (dethm cons/car+cdr (x)
      (if (atom x)
        't
        (equal (cons (car x) (cdr x)) x)))
    #+end_src

*** The Axioms of If (final)

    #+begin_src scheme
    (dethm if-true (x y)
      (equal (if 't x y) x))

    (dethm if-false (x y)
      (equal (if 't x y) y))

    ;; 1. eliminate (if) with same A and E
    ;; 2. introduce arbitrary Q
    (dethm if-same (x y)
      (equal (if x y y) y))

    ;; 1. eliminate repeating (if)
    ;;    with the same Q nested at A
    ;; 2. under the same Q
    ;;    nest-A at (if)
    ;;    introduce arbitrary E
    (dethm if-nest-A (x y z)
      (if x (equal (if x y z) y) 't))

    ;; 1. eliminate repeating (if)
    ;;    with the same Q nested at E
    ;; 2. under the same Q
    ;;    nest-E at (if)
    ;;    introduce arbitrary A
    (dethm if-nest-E (x y z)
      (if x 't (equal (if x y z) z)))
    #+end_src

* (3. What’s in a Name?)

*** The Law of Defun (initial)

    - Given the non-recursive function
      (defun name (x1 ... xn) body)
      (name e1 ... en ) = body
      where x1 is e1, ..., xn is en.

*** proofs

    #+begin_src scheme
    (J-Bob/prove (prelude)
      '(((defun pair (x y)
           (cons x (cons y '())))
         nil)
        ((defun first-of (x)
           (car x))
         nil)
        ((defun second-of (x)
           (car (cdr x)))
         nil)
        ((dethm first-of-pair (a b)
           (equal (first-of (pair a b)) a))
         nil
         ((1 1) (pair a b))
         ((1) (first-of (cons a (cons b '()))))
         ((1) (car/cons a (cons b '())))
         (() (equal-same a)))
        ((dethm second-of-pair (a b)
           (equal (second-of (pair a b)) b))
         nil
         ((1 1) (pair a b))
         ((1) (second-of (cons a (cons b '()))))
         ((1 1) (cdr/cons a (cons b '())))
         ((1) (car/cons b '()))
         (() (equal-same b)))
        ((defun in-pair? (xs)
           (if (equal (first-of xs) '?)
             't
             (equal (second-of xs) '?)))
         nil)
        ((dethm in-first-of-pair (b)
           (equal (in-pair? (pair '? b)) 't))
         nil
         ((1 1) (pair '? b))
         ((1) (in-pair? (cons '? (cons b '()))))
         ((1 Q 1) (first-of (cons '? (cons b '()))))
         ((1 Q 1) (car/cons '? (cons b '())))
         ((1 Q) (equal-same '?))
         ((1) (if-true
               't
               (equal (second-of (cons '? (cons b '()))) '?)))
         (() (equal-same 't)))
        ((dethm in-second-of-pair (a)
           (equal (in-pair? (pair a '?)) 't))
         nil
         ((1 1) (pair a '?))
         ((1) (in-pair? (cons a (cons '? '()))))
         ((1 Q 1) (first-of (cons a (cons '? '()))))
         ((1 Q 1) (car/cons a (cons '? '())))
         ((1 E 1) (second-of (cons a (cons '? '()))))
         ((1 E 1 1) (cdr/cons a (cons '? '())))
         ((1 E 1) (car/cons '? '()))
         ((1 E) (equal-same '?))
         ((1) (if-same (equal a '?) 't))
         (() (equal-same 't)))))
    #+end_src

*** Insight: Skip Irrelevant Expressions

    - Rewriting a claim to 't
      does not have to go in any particular order.
      Some parts of the expression might be skipped entirely.
      For example, if-same can simplify many if expressions to 't
      regardless of the if question.

* (4. Part of This Total Breakfast)

*** The Axioms of Size

    #+begin_src scheme
    (dethm natp/size (x)
      (equal (natp (size x)) 't))

    (dethm size/car (x)
      (if (atom x) 't (equal (< (size (car x)) (size x)) 't)))

    (dethm size/cdr (x)
      (if (atom x) 't (equal (< (size (cdr x)) (size x)) 't)))
    #+end_src

*** proofs

    #+begin_src scheme
    (J-Bob/prove (prelude)
      '(((defun list? (x)
           (if (atom x)
             (equal x '())
             (list? (cdr x))))
         (size x)
         ((Q) (natp/size x))
         (() (if-true
              (if (atom x) 't (< (size (cdr x)) (size x)))
              'nil))
         ((E) (size/cdr x))
         (() (if-same (atom x) 't)))
        ((defun sub (x y)
           (if (atom y)
             (if (equal y '?) x y)
             (cons (sub x (car y))
                   (sub x (cdr y)))))
         (size y)
         ((Q) (natp/size y))
         (() (if-true (if (atom y)
                        't
                        (if (< (size (car y)) (size y))
                          (< (size (cdr y)) (size y))
                          'nil))
                      'nil))
         ((E Q) (size/car y))
         ((E A) (size/cdr y))
         ((E) (if-true 't 'nil))
         (() (if-same (atom y) 't)))))
    #+end_src

* (5. Think It Over, and Over, and Over)

*** Insight: Rewrite from the Inside Out

    - Rewrite an expression from the "inside" out,
      starting inside if answers, if elses, and function arguments.

      Simplify the arguments
      of a function application as much as possible,
      then use the Law of Defun
      to replace the application with the function’s body.

      Rewrite if questions as necessary
      to use theorems that require premises.

      Proceed to outer expressions
      when inner expressions cannot be simplified.

*** proofs

    #+begin_src scheme
    (J-Bob/prove (prelude)
      '(((defun memb? (xs)
           (if (atom xs)
             'nil
             (if (equal (car xs) '?)
               't
               (memb? (cdr xs)))))
         (size xs)
         ((Q) (natp/size xs))
         (()
          (if-true
           (if (atom xs)
             't
             (if (equal (car xs) '?)
               't
               (< (size (cdr xs)) (size xs))))
           'nil))
         ((E E) (size/cdr xs))
         ((E) (if-same (equal (car xs) '?) 't))
         (() (if-same (atom xs) 't)))
        ((defun remb (xs)
           (if (atom xs)
             '()
             (if (equal (car xs) '?)
               (remb (cdr xs))
               (cons (car xs)
                     (remb (cdr xs))))))
         (size xs)
         ((Q) (natp/size xs))
         (()
          (if-true
           (if (atom xs) 't (< (size (cdr xs)) (size xs)))
           'nil))
         ((E) (size/cdr xs))
         (() (if-same (atom xs) 't)))
        ((dethm memb?/remb0 ()
           (equal (memb? (remb '())) 'nil))
         nil
         ((1 1) (remb '()))
         ((1 1 Q) (atom '()))
         ((1 1)
          (if-true
           '()
           (if (equal (car '()) '?)
             (remb (cdr '()))
             (cons (car '()) (remb (cdr '()))))))
         ((1) (memb? '()))
         ((1 Q) (atom '()))
         ((1)
          (if-true
           'nil
           (if
               (equal (car '()) '?)
             't
             (memb? (cdr '())))))
         (() (equal-same 'nil)))))
    #+end_src

* (6. Think It Through)

* (7. Oh My, Stars!)

* (8. Learning the Rules)

* (9. Changing the Rules)

* (10. The Stars Are Aligned)

* (A. Recess)

*** J-Bob/step

    #+begin_src scheme
    (J-Bob/step (prelude)
      '(car (cons 'ham '(cheese)))
      '())

    (J-Bob/step (prelude)
      '(car (cons 'ham '(cheese)))
      '((() (car/cons 'ham '(cheese)))))

    ;; thm and fun both can be used to do rewrite
    ;;   in the following
    ;;   (atom/cons a b) is a thm
    ;;   (equal 'flapjack 'nil) is a fun
    (J-Bob/step (prelude)
      '(equal 'flapjack (atom (cons a b)))
      '(((2) (atom/cons a b))
        (() (equal 'flapjack 'nil))))

    (J-Bob/step (prelude)
      '(atom (cdr (cons (car (cons p q)) '())))
      '(((1 1 1) (car/cons p q))
        ((1) (cdr/cons p '()))
        (() (atom '()))))

    (J-Bob/step (prelude)
      '(if a c c)
      '())

    (J-Bob/step (prelude)
      '(if a c c)
      '((() (if-same a c))))

    (J-Bob/step (prelude)
      '(if a c c)
      '((() (if-same a c))
        (() (if-same
             (if (equal a 't)
               (if (equal 'nil 'nil) a b)
               (equal 'or
                      (cons 'black '(coffee))))
             c))))

    (J-Bob/step (prelude)
      '(if a c c)
      '((() (if-same a c))
        (() (if-same
             (if (equal a 't)
               (if (equal 'nil 'nil)
                 a
                 b)
               (equal 'or
                      (cons 'black '(coffee))))
             c))
        ((Q E 2) (cons 'black '(coffee)))))

    (J-Bob/step (prelude)
      '(if a c c)
      '((() (if-same a c))
        (() (if-same
             (if (equal a 't)
               (if (equal 'nil 'nil)
                 a
                 b)
               (equal 'or
                      (cons 'black '(coffee))))
             c))
        ((Q E 2) (cons 'black '(coffee)))
        ((Q A Q) (equal-same 'nil))))

    (J-Bob/step (prelude)
      '(if a c c)
      '((() (if-same a c))
        (() (if-same
             (if (equal a 't)
               (if (equal 'nil 'nil)
                 a
                 b)
               (equal 'or
                      (cons 'black '(coffee))))
             c))
        ((Q E 2) (cons 'black '(coffee)))
        ((Q A Q) (equal-same 'nil))
        ((Q A) (if-true a b))))
    #+end_src

*** J-Bob/prove

    #+begin_src scheme
    (J-Bob/prove (prelude)
      '())

    (J-Bob/prove (prelude)
      '(((defun pair (x y)
           (cons x (cons y '())))
         nil)))

    (J-Bob/prove (prelude)
      '(((defun pair (x y)
           (cons x (cons y '())))
         nil)
        ((defun first-of (x)
           (car x))
         nil)
        ((defun second-of (x)
           (car (cdr x)))
         nil)))

    (J-Bob/prove (prelude)
      '(((defun pair (x y)
           (cons x (cons y '())))
         nil)
        ((defun first-of (x)
           (car x))
         nil)
        ((defun second-of (x)
           (car (cdr x)))
         nil)
        ((dethm first-of-pair (a b)
           (equal (first-of (pair a b)) a))
         nil
         ((1 1) (pair a b))
         ((1) (first-of (cons a (cons b '()))))
         ((1) (car/cons a (cons b '())))
         (() (equal-same a)))))

    (J-Bob/prove (prelude)
      '(((defun pair (x y)
           (cons x (cons y '())))
         nil)
        ((defun first-of (x)
           (car x))
         nil)
        ((defun second-of (x)
           (car (cdr x)))
         nil)
        ((dethm first-of-pair (a b)
           (equal (first-of (pair a b)) a))
         nil
         ((1 1) (pair a b))
         ((1) (first-of (cons a (cons b '()))))
         ((1) (car/cons a (cons b '())))
         (() (equal-same a)))
        ((dethm second-of-pair (a b)
           (equal (second-of (pair a b)) b))
         nil
         ((1 1) (pair a b))
         ((1) (second-of (cons a (cons b '()))))
         ((1 1) (cdr/cons a (cons b '())))
         ((1) (car/cons b '()))
         (() (equal-same b)))))

    (J-Bob/prove (prelude)
      '(((defun pair (x y)
           (cons x (cons y '())))
         nil)
        ((defun first-of (x)
           (car x))
         nil)
        ((defun second-of (x)
           (car (cdr x)))
         nil)
        ((dethm first-of-pair (a b)
           (equal (first-of (pair a b)) a))
         nil
         ((1 1) (pair a b))
         ((1) (first-of (cons a (cons b '()))))
         ((1) (car/cons a (cons b '())))
         (() (equal-same a)))
        ((dethm second-of-pair (a b)
           (equal (second-of (pair a b)) b))
         nil
         ((1 1) (pair a b))
         ((1) (second-of (cons a (cons b '()))))
         ((1 1) (cdr/cons a (cons b '())))
         ((1) (car/cons b '()))
         (() (equal-same b)))))
    #+end_src

*** J-Bob/define

    #+begin_src scheme
    (defun prelude+first-of-pair ()
      (J-Bob/define (prelude)
        '(((defun pair (x y)
             (cons x (cons y '())))
           nil)
          ((defun first-of (x)
             (car x))
           nil)
          ((defun second-of (x)
             (car (cdr x)))
           nil)
          ((dethm first-of-pair (a b)
             (equal (first-of (pair a b)) a))
           nil
           ((1 1) (pair a b))
           ((1) (first-of (cons a (cons b '()))))
           ((1) (car/cons a (cons b '())))
           (() (equal-same a))))))

    ;; we can provide several proof attempts without finishing them
    ;;   J-Bob/prove shows us the expression
    ;;   from the last unfinished proof attempt,
    ;;   but we must finish all the proofs to get ''t
    (J-Bob/prove (prelude+first-of-pair)
      '(((dethm second-of-pair (a b)
           (equal (second-of (pair a b)) b))
         nil)
        ((defun in-pair? (xs)
           (if (equal (first-of xs) '?)
             't
             (equal (second-of xs) '?)))
         nil)
        ((dethm in-first-of-pair (b)
           (equal (in-pair? (pair '? b)) 't))
         nil)
        ((dethm in-second-of-pair (a)
           (equal (in-pair? (pair a '?)) 't))
         nil)))
    #+end_src

*** about seed

* (D. Restless for More?)

*** other provers

    - Agda (http://wiki.portal.chalmers.se/agda/)
    - Coq (http://coq.inria.fr/)
    - Isabelle/HOL (http://www.cl.cam.ac.uk/research/hvg/Isabelle/)
    - PVS (http://pvs.csl.sri.com/)
    - Twelf (http://twelf.org/)

*** the use of recursion in logic

    - The modern founder of the use of recursion in Logic
      is Thoralf Albert Skolem.
      In Skolem’s 1919 paper (published in 1923),
      he observed that one could use the recursive mode of thought
      to avoid “some” used in Whitehead and Russell’s Principia Mathematica.
      The ideas of this paper were important
      to the development of the Boyer-Moore Theorem Prover.

*** references

    - R. S. Boyer and J S. Moore.

      A Computational Logic.

      Academic Press, Inc., New York, 1979.

    - A. Chlipala.

      Certified Programming with Dependent Types.

      MIT Press, 2013.

    - J. N. Crossley, C. J. Ash, C. J. Brickhill,
      J. C. Stillwell, and N. H. Williams.

      What is Mathematical Logic?

      Oxford University Press, 1972.

    - M. Kaufmann, P. Manolios, and J S. Moore.

      Computer Aided Reasoning: An Approach.

      Kluwer Academic Publishers, 2000.

    - D. MacKenzie.

      Mechanizing Proof: Computing, Risk, and Trust.

      MIT Press, 2004.

    - J. McCarthy.

      A Basis for a Mathematical Theory of Computation.

      In P. Braffort and D. Hershberg (Eds.),
      Computer Programming and Formal Systems.
      North-Holland Publishing Company, Amsterdam,
      The Netherlands, 1963.

    - E. Mendelson.

      Introduction to Mathematical Logic.

      D. Van Nostrand Company, Inc.,
      Princeton, New Jersey, 1964.

    - R. Péter.

      Recursive Functions Third Revised Edition.

      Academic Press, New York, 1967.

    - Pierce, B. C., et al.

      Software Foundations.

      http://www.cis.upenn.edu/~bcpierce/sf (2010-2015).

    - T. A. Skolem.

      The foundations of elementary arithmetic
      established by means of the recursive mode of thought,
      without the use of apparent variables
      ranging over infinite domains,

      in From Frege to Gödel: A Source Book in Mathematical Logic,
      1879–1931 (Jean van Heijenoort, ed.),
      pages 302–333. Harvard Univ. Press, 1967.
      Paper written in 1919 and appeared in published form in 1923.

    - P. Suppes.

      Introduction to Logic.

      D. Van Nostrand Company, Inc., Princeton, New Jersey, 1957.

    - M. Wand.

      Induction, Recursion, and Programming.

      Elsevier North Holland, Inc., 1980.

    - A. N. Whitehead and B. Russell.

      Principia Mathematica.

      Cambridge: Cambridge University Press,
      in 3 vols, 1910, 1912, 1913.
      Second edition, 1925 (Vol. 1), 1927 (Vols 2, 3).
      Abridged as Principia Mathematica to *56,
      Cambridge University Press, 1962.

* (Afterword 221)

  - little books are about
    taking a research insight and think it over
    until the explanation was accessible to freshman students.

* (Index 222)
