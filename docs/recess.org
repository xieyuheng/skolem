* (A. Recess)

*** J-Bob/step

    #+begin_src cicada
    (J-Bob/step (prelude)
      '(car (cons 'ham '(cheese)))
      '())

    (J-Bob/step (prelude)
      '(car (cons 'ham '(cheese)))
      '((() (car/cons 'ham '(cheese)))))

    ;; thm and fun both can be used to do rewrite
    ;;   in the following
    ;;   (atom/cons a b) is a thm
    ;;   (equal 'flapjack 'nil) is a fun
    (J-Bob/step (prelude)
      '(equal 'flapjack (atom (cons a b)))
      '(((2) (atom/cons a b))
        (() (equal 'flapjack 'nil))))

    (J-Bob/step (prelude)
      '(atom (cdr (cons (car (cons p q)) '())))
      '(((1 1 1) (car/cons p q))
        ((1) (cdr/cons p '()))
        (() (atom '()))))

    (J-Bob/step (prelude)
      '(if a c c)
      '())

    (J-Bob/step (prelude)
      '(if a c c)
      '((() (if-same a c))))

    (J-Bob/step (prelude)
      '(if a c c)
      '((() (if-same a c))
        (() (if-same
             (if (equal a 't)
               (if (equal 'nil 'nil) a b)
               (equal 'or
                      (cons 'black '(coffee))))
             c))))

    (J-Bob/step (prelude)
      '(if a c c)
      '((() (if-same a c))
        (() (if-same
             (if (equal a 't)
               (if (equal 'nil 'nil)
                 a
                 b)
               (equal 'or
                      (cons 'black '(coffee))))
             c))
        ((Q E 2) (cons 'black '(coffee)))))

    (J-Bob/step (prelude)
      '(if a c c)
      '((() (if-same a c))
        (() (if-same
             (if (equal a 't)
               (if (equal 'nil 'nil)
                 a
                 b)
               (equal 'or
                      (cons 'black '(coffee))))
             c))
        ((Q E 2) (cons 'black '(coffee)))
        ((Q A Q) (equal-same 'nil))))

    (J-Bob/step (prelude)
      '(if a c c)
      '((() (if-same a c))
        (() (if-same
             (if (equal a 't)
               (if (equal 'nil 'nil)
                 a
                 b)
               (equal 'or
                      (cons 'black '(coffee))))
             c))
        ((Q E 2) (cons 'black '(coffee)))
        ((Q A Q) (equal-same 'nil))
        ((Q A) (if-true a b))))
    #+end_src

*** J-Bob/prove

    #+begin_src cicada
    (J-Bob/prove (prelude)
      '())

    (J-Bob/prove (prelude)
      '(((+fun pair (x y)
           (cons x (cons y '())))
         nil)))

    (J-Bob/prove (prelude)
      '(((+fun pair (x y)
           (cons x (cons y '())))
         nil)
        ((+fun first-of (x)
           (car x))
         nil)
        ((+fun second-of (x)
           (car (cdr x)))
         nil)))

    (J-Bob/prove (prelude)
      '(((+fun pair (x y)
           (cons x (cons y '())))
         nil)
        ((+fun first-of (x)
           (car x))
         nil)
        ((+fun second-of (x)
           (car (cdr x)))
         nil)
        ((+theorem first-of-pair (a b)
           (equal (first-of (pair a b)) a))
         nil
         ((1 1) (pair a b))
         ((1) (first-of (cons a (cons b '()))))
         ((1) (car/cons a (cons b '())))
         (() (equal-same a)))))

    (J-Bob/prove (prelude)
      '(((+fun pair (x y)
           (cons x (cons y '())))
         nil)
        ((+fun first-of (x)
           (car x))
         nil)
        ((+fun second-of (x)
           (car (cdr x)))
         nil)
        ((+theorem first-of-pair (a b)
           (equal (first-of (pair a b)) a))
         nil
         ((1 1) (pair a b))
         ((1) (first-of (cons a (cons b '()))))
         ((1) (car/cons a (cons b '())))
         (() (equal-same a)))
        ((+theorem second-of-pair (a b)
           (equal (second-of (pair a b)) b))
         nil
         ((1 1) (pair a b))
         ((1) (second-of (cons a (cons b '()))))
         ((1 1) (cdr/cons a (cons b '())))
         ((1) (car/cons b '()))
         (() (equal-same b)))))

    (J-Bob/prove (prelude)
      '(((+fun pair (x y)
           (cons x (cons y '())))
         nil)
        ((+fun first-of (x)
           (car x))
         nil)
        ((+fun second-of (x)
           (car (cdr x)))
         nil)
        ((+theorem first-of-pair (a b)
           (equal (first-of (pair a b)) a))
         nil
         ((1 1) (pair a b))
         ((1) (first-of (cons a (cons b '()))))
         ((1) (car/cons a (cons b '())))
         (() (equal-same a)))
        ((+theorem second-of-pair (a b)
           (equal (second-of (pair a b)) b))
         nil
         ((1 1) (pair a b))
         ((1) (second-of (cons a (cons b '()))))
         ((1 1) (cdr/cons a (cons b '())))
         ((1) (car/cons b '()))
         (() (equal-same b)))))
    #+end_src

*** J-Bob/define

    #+begin_src cicada
    (+fun prelude+first-of-pair ()
      (J-Bob/define (prelude)
        '(((+fun pair (x y)
             (cons x (cons y '())))
           nil)
          ((+fun first-of (x)
             (car x))
           nil)
          ((+fun second-of (x)
             (car (cdr x)))
           nil)
          ((+theorem first-of-pair (a b)
             (equal (first-of (pair a b)) a))
           nil
           ((1 1) (pair a b))
           ((1) (first-of (cons a (cons b '()))))
           ((1) (car/cons a (cons b '())))
           (() (equal-same a))))))

    ;; we can provide several proof attempts without finishing them
    ;;   J-Bob/prove shows us the expression
    ;;   from the last unfinished proof attempt,
    ;;   but we must finish all the proofs to get ''t
    (J-Bob/prove (prelude+first-of-pair)
      '(((+theorem second-of-pair (a b)
           (equal (second-of (pair a b)) b))
         nil)
        ((+fun in-pair? (xs)
           (if (equal (first-of xs) '?)
             't
             (equal (second-of xs) '?)))
         nil)
        ((+theorem in-first-of-pair (b)
           (equal (in-pair? (pair '? b)) 't))
         nil)
        ((+theorem in-second-of-pair (a)
           (equal (in-pair? (pair a '?)) 't))
         nil)))
    #+end_src

*** about seed
